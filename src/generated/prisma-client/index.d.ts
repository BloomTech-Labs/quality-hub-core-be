// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  response: (where?: ResponseWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  response: (where: ResponseWhereUniqueInput) => ResponseNullablePromise;
  responses: (args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Response>;
  responsesConnection: (args?: {
    where?: ResponseWhereInput;
    orderBy?: ResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResponseConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createResponse: (data: ResponseCreateInput) => ResponsePromise;
  updateResponse: (args: {
    data: ResponseUpdateInput;
    where: ResponseWhereUniqueInput;
  }) => ResponsePromise;
  updateManyResponses: (args: {
    data: ResponseUpdateManyMutationInput;
    where?: ResponseWhereInput;
  }) => BatchPayloadPromise;
  upsertResponse: (args: {
    where: ResponseWhereUniqueInput;
    create: ResponseCreateInput;
    update: ResponseUpdateInput;
  }) => ResponsePromise;
  deleteResponse: (where: ResponseWhereUniqueInput) => ResponsePromise;
  deleteManyResponses: (where?: ResponseWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  response: (
    where?: ResponseSubscriptionWhereInput
  ) => ResponseSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Microservice = "INTERVIEWQ" | "RESUMEQ";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "job_ASC"
  | "job_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "review_ASC"
  | "review_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "lastUpdated_ASC"
  | "lastUpdated_DESC"
  | "microservice_ASC"
  | "microservice_DESC";

export type ResponseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "lastUpdated_ASC"
  | "lastUpdated_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stripeId_ASC"
  | "stripeId_DESC"
  | "stripeCusId_ASC"
  | "stripeCusId_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "image_url_ASC"
  | "image_url_DESC"
  | "portfolio_url_ASC"
  | "portfolio_url_DESC"
  | "linkedin_url_ASC"
  | "linkedin_url_DESC"
  | "github_url_ASC"
  | "github_url_DESC"
  | "personal_url_ASC"
  | "personal_url_DESC"
  | "blog_url_ASC"
  | "blog_url_DESC"
  | "twitter_url_ASC"
  | "twitter_url_DESC"
  | "activated_stripe_ASC"
  | "activated_stripe_DESC"
  | "fn_lc_ASC"
  | "fn_lc_DESC"
  | "ln_lc_ASC"
  | "ln_lc_DESC"
  | "city_lc_ASC"
  | "city_lc_DESC"
  | "state_lc_ASC"
  | "state_lc_DESC"
  | "chatActive_ASC"
  | "chatActive_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ResponseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  coach?: Maybe<UserWhereInput>;
  seeker?: Maybe<UserWhereInput>;
  job?: Maybe<String>;
  job_not?: Maybe<String>;
  job_in?: Maybe<String[] | String>;
  job_not_in?: Maybe<String[] | String>;
  job_lt?: Maybe<String>;
  job_lte?: Maybe<String>;
  job_gt?: Maybe<String>;
  job_gte?: Maybe<String>;
  job_contains?: Maybe<String>;
  job_not_contains?: Maybe<String>;
  job_starts_with?: Maybe<String>;
  job_not_starts_with?: Maybe<String>;
  job_ends_with?: Maybe<String>;
  job_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  review?: Maybe<String>;
  review_not?: Maybe<String>;
  review_in?: Maybe<String[] | String>;
  review_not_in?: Maybe<String[] | String>;
  review_lt?: Maybe<String>;
  review_lte?: Maybe<String>;
  review_gt?: Maybe<String>;
  review_gte?: Maybe<String>;
  review_contains?: Maybe<String>;
  review_not_contains?: Maybe<String>;
  review_starts_with?: Maybe<String>;
  review_not_starts_with?: Maybe<String>;
  review_ends_with?: Maybe<String>;
  review_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastUpdated?: Maybe<DateTimeInput>;
  lastUpdated_not?: Maybe<DateTimeInput>;
  lastUpdated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_lt?: Maybe<DateTimeInput>;
  lastUpdated_lte?: Maybe<DateTimeInput>;
  lastUpdated_gt?: Maybe<DateTimeInput>;
  lastUpdated_gte?: Maybe<DateTimeInput>;
  response?: Maybe<ResponseWhereInput>;
  microservice?: Maybe<Microservice>;
  microservice_not?: Maybe<Microservice>;
  microservice_in?: Maybe<Microservice[] | Microservice>;
  microservice_not_in?: Maybe<Microservice[] | Microservice>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  stripeId?: Maybe<String>;
  stripeId_not?: Maybe<String>;
  stripeId_in?: Maybe<String[] | String>;
  stripeId_not_in?: Maybe<String[] | String>;
  stripeId_lt?: Maybe<String>;
  stripeId_lte?: Maybe<String>;
  stripeId_gt?: Maybe<String>;
  stripeId_gte?: Maybe<String>;
  stripeId_contains?: Maybe<String>;
  stripeId_not_contains?: Maybe<String>;
  stripeId_starts_with?: Maybe<String>;
  stripeId_not_starts_with?: Maybe<String>;
  stripeId_ends_with?: Maybe<String>;
  stripeId_not_ends_with?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  stripeCusId_not?: Maybe<String>;
  stripeCusId_in?: Maybe<String[] | String>;
  stripeCusId_not_in?: Maybe<String[] | String>;
  stripeCusId_lt?: Maybe<String>;
  stripeCusId_lte?: Maybe<String>;
  stripeCusId_gt?: Maybe<String>;
  stripeCusId_gte?: Maybe<String>;
  stripeCusId_contains?: Maybe<String>;
  stripeCusId_not_contains?: Maybe<String>;
  stripeCusId_starts_with?: Maybe<String>;
  stripeCusId_not_starts_with?: Maybe<String>;
  stripeCusId_ends_with?: Maybe<String>;
  stripeCusId_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  image_url?: Maybe<String>;
  image_url_not?: Maybe<String>;
  image_url_in?: Maybe<String[] | String>;
  image_url_not_in?: Maybe<String[] | String>;
  image_url_lt?: Maybe<String>;
  image_url_lte?: Maybe<String>;
  image_url_gt?: Maybe<String>;
  image_url_gte?: Maybe<String>;
  image_url_contains?: Maybe<String>;
  image_url_not_contains?: Maybe<String>;
  image_url_starts_with?: Maybe<String>;
  image_url_not_starts_with?: Maybe<String>;
  image_url_ends_with?: Maybe<String>;
  image_url_not_ends_with?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  portfolio_url_not?: Maybe<String>;
  portfolio_url_in?: Maybe<String[] | String>;
  portfolio_url_not_in?: Maybe<String[] | String>;
  portfolio_url_lt?: Maybe<String>;
  portfolio_url_lte?: Maybe<String>;
  portfolio_url_gt?: Maybe<String>;
  portfolio_url_gte?: Maybe<String>;
  portfolio_url_contains?: Maybe<String>;
  portfolio_url_not_contains?: Maybe<String>;
  portfolio_url_starts_with?: Maybe<String>;
  portfolio_url_not_starts_with?: Maybe<String>;
  portfolio_url_ends_with?: Maybe<String>;
  portfolio_url_not_ends_with?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  linkedin_url_not?: Maybe<String>;
  linkedin_url_in?: Maybe<String[] | String>;
  linkedin_url_not_in?: Maybe<String[] | String>;
  linkedin_url_lt?: Maybe<String>;
  linkedin_url_lte?: Maybe<String>;
  linkedin_url_gt?: Maybe<String>;
  linkedin_url_gte?: Maybe<String>;
  linkedin_url_contains?: Maybe<String>;
  linkedin_url_not_contains?: Maybe<String>;
  linkedin_url_starts_with?: Maybe<String>;
  linkedin_url_not_starts_with?: Maybe<String>;
  linkedin_url_ends_with?: Maybe<String>;
  linkedin_url_not_ends_with?: Maybe<String>;
  github_url?: Maybe<String>;
  github_url_not?: Maybe<String>;
  github_url_in?: Maybe<String[] | String>;
  github_url_not_in?: Maybe<String[] | String>;
  github_url_lt?: Maybe<String>;
  github_url_lte?: Maybe<String>;
  github_url_gt?: Maybe<String>;
  github_url_gte?: Maybe<String>;
  github_url_contains?: Maybe<String>;
  github_url_not_contains?: Maybe<String>;
  github_url_starts_with?: Maybe<String>;
  github_url_not_starts_with?: Maybe<String>;
  github_url_ends_with?: Maybe<String>;
  github_url_not_ends_with?: Maybe<String>;
  personal_url?: Maybe<String>;
  personal_url_not?: Maybe<String>;
  personal_url_in?: Maybe<String[] | String>;
  personal_url_not_in?: Maybe<String[] | String>;
  personal_url_lt?: Maybe<String>;
  personal_url_lte?: Maybe<String>;
  personal_url_gt?: Maybe<String>;
  personal_url_gte?: Maybe<String>;
  personal_url_contains?: Maybe<String>;
  personal_url_not_contains?: Maybe<String>;
  personal_url_starts_with?: Maybe<String>;
  personal_url_not_starts_with?: Maybe<String>;
  personal_url_ends_with?: Maybe<String>;
  personal_url_not_ends_with?: Maybe<String>;
  blog_url?: Maybe<String>;
  blog_url_not?: Maybe<String>;
  blog_url_in?: Maybe<String[] | String>;
  blog_url_not_in?: Maybe<String[] | String>;
  blog_url_lt?: Maybe<String>;
  blog_url_lte?: Maybe<String>;
  blog_url_gt?: Maybe<String>;
  blog_url_gte?: Maybe<String>;
  blog_url_contains?: Maybe<String>;
  blog_url_not_contains?: Maybe<String>;
  blog_url_starts_with?: Maybe<String>;
  blog_url_not_starts_with?: Maybe<String>;
  blog_url_ends_with?: Maybe<String>;
  blog_url_not_ends_with?: Maybe<String>;
  twitter_url?: Maybe<String>;
  twitter_url_not?: Maybe<String>;
  twitter_url_in?: Maybe<String[] | String>;
  twitter_url_not_in?: Maybe<String[] | String>;
  twitter_url_lt?: Maybe<String>;
  twitter_url_lte?: Maybe<String>;
  twitter_url_gt?: Maybe<String>;
  twitter_url_gte?: Maybe<String>;
  twitter_url_contains?: Maybe<String>;
  twitter_url_not_contains?: Maybe<String>;
  twitter_url_starts_with?: Maybe<String>;
  twitter_url_not_starts_with?: Maybe<String>;
  twitter_url_ends_with?: Maybe<String>;
  twitter_url_not_ends_with?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  activated_stripe_not?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  fn_lc_not?: Maybe<String>;
  fn_lc_in?: Maybe<String[] | String>;
  fn_lc_not_in?: Maybe<String[] | String>;
  fn_lc_lt?: Maybe<String>;
  fn_lc_lte?: Maybe<String>;
  fn_lc_gt?: Maybe<String>;
  fn_lc_gte?: Maybe<String>;
  fn_lc_contains?: Maybe<String>;
  fn_lc_not_contains?: Maybe<String>;
  fn_lc_starts_with?: Maybe<String>;
  fn_lc_not_starts_with?: Maybe<String>;
  fn_lc_ends_with?: Maybe<String>;
  fn_lc_not_ends_with?: Maybe<String>;
  ln_lc?: Maybe<String>;
  ln_lc_not?: Maybe<String>;
  ln_lc_in?: Maybe<String[] | String>;
  ln_lc_not_in?: Maybe<String[] | String>;
  ln_lc_lt?: Maybe<String>;
  ln_lc_lte?: Maybe<String>;
  ln_lc_gt?: Maybe<String>;
  ln_lc_gte?: Maybe<String>;
  ln_lc_contains?: Maybe<String>;
  ln_lc_not_contains?: Maybe<String>;
  ln_lc_starts_with?: Maybe<String>;
  ln_lc_not_starts_with?: Maybe<String>;
  ln_lc_ends_with?: Maybe<String>;
  ln_lc_not_ends_with?: Maybe<String>;
  city_lc?: Maybe<String>;
  city_lc_not?: Maybe<String>;
  city_lc_in?: Maybe<String[] | String>;
  city_lc_not_in?: Maybe<String[] | String>;
  city_lc_lt?: Maybe<String>;
  city_lc_lte?: Maybe<String>;
  city_lc_gt?: Maybe<String>;
  city_lc_gte?: Maybe<String>;
  city_lc_contains?: Maybe<String>;
  city_lc_not_contains?: Maybe<String>;
  city_lc_starts_with?: Maybe<String>;
  city_lc_not_starts_with?: Maybe<String>;
  city_lc_ends_with?: Maybe<String>;
  city_lc_not_ends_with?: Maybe<String>;
  state_lc?: Maybe<String>;
  state_lc_not?: Maybe<String>;
  state_lc_in?: Maybe<String[] | String>;
  state_lc_not_in?: Maybe<String[] | String>;
  state_lc_lt?: Maybe<String>;
  state_lc_lte?: Maybe<String>;
  state_lc_gt?: Maybe<String>;
  state_lc_gte?: Maybe<String>;
  state_lc_contains?: Maybe<String>;
  state_lc_not_contains?: Maybe<String>;
  state_lc_starts_with?: Maybe<String>;
  state_lc_not_starts_with?: Maybe<String>;
  state_lc_ends_with?: Maybe<String>;
  state_lc_not_ends_with?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  chatActive_not?: Maybe<Boolean>;
  reviewsReceived_every?: Maybe<ReviewWhereInput>;
  reviewsReceived_some?: Maybe<ReviewWhereInput>;
  reviewsReceived_none?: Maybe<ReviewWhereInput>;
  reviewsGiven_every?: Maybe<ReviewWhereInput>;
  reviewsGiven_some?: Maybe<ReviewWhereInput>;
  reviewsGiven_none?: Maybe<ReviewWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ResponseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  review?: Maybe<ReviewWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastUpdated?: Maybe<DateTimeInput>;
  lastUpdated_not?: Maybe<DateTimeInput>;
  lastUpdated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_lt?: Maybe<DateTimeInput>;
  lastUpdated_lte?: Maybe<DateTimeInput>;
  lastUpdated_gt?: Maybe<DateTimeInput>;
  lastUpdated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResponseWhereInput[] | ResponseWhereInput>;
  OR?: Maybe<ResponseWhereInput[] | ResponseWhereInput>;
  NOT?: Maybe<ResponseWhereInput[] | ResponseWhereInput>;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  job?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface ResponseCreateInput {
  id?: Maybe<ID_Input>;
  review: ReviewCreateOneWithoutResponseInput;
  text: String;
}

export interface ReviewCreateOneWithoutResponseInput {
  create?: Maybe<ReviewCreateWithoutResponseInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutResponseInput {
  id?: Maybe<ID_Input>;
  coach: UserCreateOneWithoutReviewsReceivedInput;
  seeker: UserCreateOneWithoutReviewsGivenInput;
  job: String;
  rating: Int;
  review?: Maybe<String>;
  microservice: Microservice;
}

export interface UserCreateOneWithoutReviewsReceivedInput {
  create?: Maybe<UserCreateWithoutReviewsReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReviewsReceivedInput {
  id?: Maybe<ID_Input>;
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  reviewsGiven?: Maybe<ReviewCreateManyWithoutSeekerInput>;
}

export interface ReviewCreateManyWithoutSeekerInput {
  create?: Maybe<
    ReviewCreateWithoutSeekerInput[] | ReviewCreateWithoutSeekerInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutSeekerInput {
  id?: Maybe<ID_Input>;
  coach: UserCreateOneWithoutReviewsReceivedInput;
  job: String;
  rating: Int;
  review?: Maybe<String>;
  response?: Maybe<ResponseCreateOneWithoutReviewInput>;
  microservice: Microservice;
}

export interface ResponseCreateOneWithoutReviewInput {
  create?: Maybe<ResponseCreateWithoutReviewInput>;
  connect?: Maybe<ResponseWhereUniqueInput>;
}

export interface ResponseCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  text: String;
}

export interface UserCreateOneWithoutReviewsGivenInput {
  create?: Maybe<UserCreateWithoutReviewsGivenInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReviewsGivenInput {
  id?: Maybe<ID_Input>;
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  reviewsReceived?: Maybe<ReviewCreateManyWithoutCoachInput>;
}

export interface ReviewCreateManyWithoutCoachInput {
  create?: Maybe<
    ReviewCreateWithoutCoachInput[] | ReviewCreateWithoutCoachInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutCoachInput {
  id?: Maybe<ID_Input>;
  seeker: UserCreateOneWithoutReviewsGivenInput;
  job: String;
  rating: Int;
  review?: Maybe<String>;
  response?: Maybe<ResponseCreateOneWithoutReviewInput>;
  microservice: Microservice;
}

export interface ResponseUpdateInput {
  review?: Maybe<ReviewUpdateOneRequiredWithoutResponseInput>;
  text?: Maybe<String>;
}

export interface ReviewUpdateOneRequiredWithoutResponseInput {
  create?: Maybe<ReviewCreateWithoutResponseInput>;
  update?: Maybe<ReviewUpdateWithoutResponseDataInput>;
  upsert?: Maybe<ReviewUpsertWithoutResponseInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewUpdateWithoutResponseDataInput {
  coach?: Maybe<UserUpdateOneRequiredWithoutReviewsReceivedInput>;
  seeker?: Maybe<UserUpdateOneRequiredWithoutReviewsGivenInput>;
  job?: Maybe<String>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
  microservice?: Maybe<Microservice>;
}

export interface UserUpdateOneRequiredWithoutReviewsReceivedInput {
  create?: Maybe<UserCreateWithoutReviewsReceivedInput>;
  update?: Maybe<UserUpdateWithoutReviewsReceivedDataInput>;
  upsert?: Maybe<UserUpsertWithoutReviewsReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReviewsReceivedDataInput {
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  reviewsGiven?: Maybe<ReviewUpdateManyWithoutSeekerInput>;
}

export interface ReviewUpdateManyWithoutSeekerInput {
  create?: Maybe<
    ReviewCreateWithoutSeekerInput[] | ReviewCreateWithoutSeekerInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutSeekerInput[]
    | ReviewUpdateWithWhereUniqueWithoutSeekerInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutSeekerInput[]
    | ReviewUpsertWithWhereUniqueWithoutSeekerInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutSeekerInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutSeekerDataInput;
}

export interface ReviewUpdateWithoutSeekerDataInput {
  coach?: Maybe<UserUpdateOneRequiredWithoutReviewsReceivedInput>;
  job?: Maybe<String>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
  response?: Maybe<ResponseUpdateOneWithoutReviewInput>;
  microservice?: Maybe<Microservice>;
}

export interface ResponseUpdateOneWithoutReviewInput {
  create?: Maybe<ResponseCreateWithoutReviewInput>;
  update?: Maybe<ResponseUpdateWithoutReviewDataInput>;
  upsert?: Maybe<ResponseUpsertWithoutReviewInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ResponseWhereUniqueInput>;
}

export interface ResponseUpdateWithoutReviewDataInput {
  text?: Maybe<String>;
}

export interface ResponseUpsertWithoutReviewInput {
  update: ResponseUpdateWithoutReviewDataInput;
  create: ResponseCreateWithoutReviewInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutSeekerInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutSeekerDataInput;
  create: ReviewCreateWithoutSeekerInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  job?: Maybe<String>;
  job_not?: Maybe<String>;
  job_in?: Maybe<String[] | String>;
  job_not_in?: Maybe<String[] | String>;
  job_lt?: Maybe<String>;
  job_lte?: Maybe<String>;
  job_gt?: Maybe<String>;
  job_gte?: Maybe<String>;
  job_contains?: Maybe<String>;
  job_not_contains?: Maybe<String>;
  job_starts_with?: Maybe<String>;
  job_not_starts_with?: Maybe<String>;
  job_ends_with?: Maybe<String>;
  job_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  review?: Maybe<String>;
  review_not?: Maybe<String>;
  review_in?: Maybe<String[] | String>;
  review_not_in?: Maybe<String[] | String>;
  review_lt?: Maybe<String>;
  review_lte?: Maybe<String>;
  review_gt?: Maybe<String>;
  review_gte?: Maybe<String>;
  review_contains?: Maybe<String>;
  review_not_contains?: Maybe<String>;
  review_starts_with?: Maybe<String>;
  review_not_starts_with?: Maybe<String>;
  review_ends_with?: Maybe<String>;
  review_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastUpdated?: Maybe<DateTimeInput>;
  lastUpdated_not?: Maybe<DateTimeInput>;
  lastUpdated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastUpdated_lt?: Maybe<DateTimeInput>;
  lastUpdated_lte?: Maybe<DateTimeInput>;
  lastUpdated_gt?: Maybe<DateTimeInput>;
  lastUpdated_gte?: Maybe<DateTimeInput>;
  microservice?: Maybe<Microservice>;
  microservice_not?: Maybe<Microservice>;
  microservice_in?: Maybe<Microservice[] | Microservice>;
  microservice_not_in?: Maybe<Microservice[] | Microservice>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  job?: Maybe<String>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
  microservice?: Maybe<Microservice>;
}

export interface UserUpsertWithoutReviewsReceivedInput {
  update: UserUpdateWithoutReviewsReceivedDataInput;
  create: UserCreateWithoutReviewsReceivedInput;
}

export interface UserUpdateOneRequiredWithoutReviewsGivenInput {
  create?: Maybe<UserCreateWithoutReviewsGivenInput>;
  update?: Maybe<UserUpdateWithoutReviewsGivenDataInput>;
  upsert?: Maybe<UserUpsertWithoutReviewsGivenInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReviewsGivenDataInput {
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  reviewsReceived?: Maybe<ReviewUpdateManyWithoutCoachInput>;
}

export interface ReviewUpdateManyWithoutCoachInput {
  create?: Maybe<
    ReviewCreateWithoutCoachInput[] | ReviewCreateWithoutCoachInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutCoachInput[]
    | ReviewUpdateWithWhereUniqueWithoutCoachInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutCoachInput[]
    | ReviewUpsertWithWhereUniqueWithoutCoachInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutCoachInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutCoachDataInput;
}

export interface ReviewUpdateWithoutCoachDataInput {
  seeker?: Maybe<UserUpdateOneRequiredWithoutReviewsGivenInput>;
  job?: Maybe<String>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
  response?: Maybe<ResponseUpdateOneWithoutReviewInput>;
  microservice?: Maybe<Microservice>;
}

export interface ReviewUpsertWithWhereUniqueWithoutCoachInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutCoachDataInput;
  create: ReviewCreateWithoutCoachInput;
}

export interface UserUpsertWithoutReviewsGivenInput {
  update: UserUpdateWithoutReviewsGivenDataInput;
  create: UserCreateWithoutReviewsGivenInput;
}

export interface ReviewUpsertWithoutResponseInput {
  update: ReviewUpdateWithoutResponseDataInput;
  create: ReviewCreateWithoutResponseInput;
}

export interface ResponseUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  coach: UserCreateOneWithoutReviewsReceivedInput;
  seeker: UserCreateOneWithoutReviewsGivenInput;
  job: String;
  rating: Int;
  review?: Maybe<String>;
  response?: Maybe<ResponseCreateOneWithoutReviewInput>;
  microservice: Microservice;
}

export interface ReviewUpdateInput {
  coach?: Maybe<UserUpdateOneRequiredWithoutReviewsReceivedInput>;
  seeker?: Maybe<UserUpdateOneRequiredWithoutReviewsGivenInput>;
  job?: Maybe<String>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
  response?: Maybe<ResponseUpdateOneWithoutReviewInput>;
  microservice?: Maybe<Microservice>;
}

export interface ReviewUpdateManyMutationInput {
  job?: Maybe<String>;
  rating?: Maybe<Int>;
  review?: Maybe<String>;
  microservice?: Maybe<Microservice>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  reviewsReceived?: Maybe<ReviewCreateManyWithoutCoachInput>;
  reviewsGiven?: Maybe<ReviewCreateManyWithoutSeekerInput>;
}

export interface UserUpdateInput {
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
  reviewsReceived?: Maybe<ReviewUpdateManyWithoutCoachInput>;
  reviewsGiven?: Maybe<ReviewUpdateManyWithoutSeekerInput>;
}

export interface UserUpdateManyMutationInput {
  stripeId?: Maybe<String>;
  stripeCusId?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  image_url?: Maybe<String>;
  portfolio_url?: Maybe<String>;
  linkedin_url?: Maybe<String>;
  github_url?: Maybe<String>;
  personal_url?: Maybe<String>;
  blog_url?: Maybe<String>;
  twitter_url?: Maybe<String>;
  activated_stripe?: Maybe<Boolean>;
  fn_lc?: Maybe<String>;
  ln_lc?: Maybe<String>;
  city_lc?: Maybe<String>;
  state_lc?: Maybe<String>;
  chatActive?: Maybe<Boolean>;
}

export interface ResponseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResponseWhereInput>;
  AND?: Maybe<
    ResponseSubscriptionWhereInput[] | ResponseSubscriptionWhereInput
  >;
  OR?: Maybe<ResponseSubscriptionWhereInput[] | ResponseSubscriptionWhereInput>;
  NOT?: Maybe<
    ResponseSubscriptionWhereInput[] | ResponseSubscriptionWhereInput
  >;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Response {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  lastUpdated: DateTimeOutput;
}

export interface ResponsePromise extends Promise<Response>, Fragmentable {
  id: () => Promise<ID_Output>;
  review: <T = ReviewPromise>() => T;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
}

export interface ResponseSubscription
  extends Promise<AsyncIterator<Response>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  review: <T = ReviewSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastUpdated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResponseNullablePromise
  extends Promise<Response | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  review: <T = ReviewPromise>() => T;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
}

export interface Review {
  id: ID_Output;
  job: String;
  rating: Int;
  review?: String;
  createdAt: DateTimeOutput;
  lastUpdated: DateTimeOutput;
  microservice: Microservice;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  coach: <T = UserPromise>() => T;
  seeker: <T = UserPromise>() => T;
  job: () => Promise<String>;
  rating: () => Promise<Int>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
  response: <T = ResponsePromise>() => T;
  microservice: () => Promise<Microservice>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coach: <T = UserSubscription>() => T;
  seeker: <T = UserSubscription>() => T;
  job: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastUpdated: () => Promise<AsyncIterator<DateTimeOutput>>;
  response: <T = ResponseSubscription>() => T;
  microservice: () => Promise<AsyncIterator<Microservice>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coach: <T = UserPromise>() => T;
  seeker: <T = UserPromise>() => T;
  job: () => Promise<String>;
  rating: () => Promise<Int>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
  response: <T = ResponsePromise>() => T;
  microservice: () => Promise<Microservice>;
}

export interface User {
  id: ID_Output;
  stripeId?: String;
  stripeCusId?: String;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  gender?: String;
  bio?: String;
  image_url?: String;
  portfolio_url?: String;
  linkedin_url?: String;
  github_url?: String;
  personal_url?: String;
  blog_url?: String;
  twitter_url?: String;
  activated_stripe?: Boolean;
  fn_lc?: String;
  ln_lc?: String;
  city_lc?: String;
  state_lc?: String;
  chatActive?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  stripeId: () => Promise<String>;
  stripeCusId: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  gender: () => Promise<String>;
  bio: () => Promise<String>;
  image_url: () => Promise<String>;
  portfolio_url: () => Promise<String>;
  linkedin_url: () => Promise<String>;
  github_url: () => Promise<String>;
  personal_url: () => Promise<String>;
  blog_url: () => Promise<String>;
  twitter_url: () => Promise<String>;
  activated_stripe: () => Promise<Boolean>;
  fn_lc: () => Promise<String>;
  ln_lc: () => Promise<String>;
  city_lc: () => Promise<String>;
  state_lc: () => Promise<String>;
  chatActive: () => Promise<Boolean>;
  reviewsReceived: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviewsGiven: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stripeId: () => Promise<AsyncIterator<String>>;
  stripeCusId: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  image_url: () => Promise<AsyncIterator<String>>;
  portfolio_url: () => Promise<AsyncIterator<String>>;
  linkedin_url: () => Promise<AsyncIterator<String>>;
  github_url: () => Promise<AsyncIterator<String>>;
  personal_url: () => Promise<AsyncIterator<String>>;
  blog_url: () => Promise<AsyncIterator<String>>;
  twitter_url: () => Promise<AsyncIterator<String>>;
  activated_stripe: () => Promise<AsyncIterator<Boolean>>;
  fn_lc: () => Promise<AsyncIterator<String>>;
  ln_lc: () => Promise<AsyncIterator<String>>;
  city_lc: () => Promise<AsyncIterator<String>>;
  state_lc: () => Promise<AsyncIterator<String>>;
  chatActive: () => Promise<AsyncIterator<Boolean>>;
  reviewsReceived: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviewsGiven: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stripeId: () => Promise<String>;
  stripeCusId: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  gender: () => Promise<String>;
  bio: () => Promise<String>;
  image_url: () => Promise<String>;
  portfolio_url: () => Promise<String>;
  linkedin_url: () => Promise<String>;
  github_url: () => Promise<String>;
  personal_url: () => Promise<String>;
  blog_url: () => Promise<String>;
  twitter_url: () => Promise<String>;
  activated_stripe: () => Promise<Boolean>;
  fn_lc: () => Promise<String>;
  ln_lc: () => Promise<String>;
  city_lc: () => Promise<String>;
  state_lc: () => Promise<String>;
  chatActive: () => Promise<Boolean>;
  reviewsReceived: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviewsGiven: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResponseConnection {
  pageInfo: PageInfo;
  edges: ResponseEdge[];
}

export interface ResponseConnectionPromise
  extends Promise<ResponseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResponseEdge>>() => T;
  aggregate: <T = AggregateResponsePromise>() => T;
}

export interface ResponseConnectionSubscription
  extends Promise<AsyncIterator<ResponseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResponseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResponseSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ResponseEdge {
  node: Response;
  cursor: String;
}

export interface ResponseEdgePromise
  extends Promise<ResponseEdge>,
    Fragmentable {
  node: <T = ResponsePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResponseEdgeSubscription
  extends Promise<AsyncIterator<ResponseEdge>>,
    Fragmentable {
  node: <T = ResponseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResponse {
  count: Int;
}

export interface AggregateResponsePromise
  extends Promise<AggregateResponse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResponseSubscription
  extends Promise<AsyncIterator<AggregateResponse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ResponseSubscriptionPayload {
  mutation: MutationType;
  node: Response;
  updatedFields: String[];
  previousValues: ResponsePreviousValues;
}

export interface ResponseSubscriptionPayloadPromise
  extends Promise<ResponseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResponsePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResponsePreviousValuesPromise>() => T;
}

export interface ResponseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResponseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResponseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResponsePreviousValuesSubscription>() => T;
}

export interface ResponsePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  lastUpdated: DateTimeOutput;
}

export interface ResponsePreviousValuesPromise
  extends Promise<ResponsePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
}

export interface ResponsePreviousValuesSubscription
  extends Promise<AsyncIterator<ResponsePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastUpdated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  job: String;
  rating: Int;
  review?: String;
  createdAt: DateTimeOutput;
  lastUpdated: DateTimeOutput;
  microservice: Microservice;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  job: () => Promise<String>;
  rating: () => Promise<Int>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastUpdated: () => Promise<DateTimeOutput>;
  microservice: () => Promise<Microservice>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  job: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastUpdated: () => Promise<AsyncIterator<DateTimeOutput>>;
  microservice: () => Promise<AsyncIterator<Microservice>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  stripeId?: String;
  stripeCusId?: String;
  first_name: String;
  last_name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  gender?: String;
  bio?: String;
  image_url?: String;
  portfolio_url?: String;
  linkedin_url?: String;
  github_url?: String;
  personal_url?: String;
  blog_url?: String;
  twitter_url?: String;
  activated_stripe?: Boolean;
  fn_lc?: String;
  ln_lc?: String;
  city_lc?: String;
  state_lc?: String;
  chatActive?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stripeId: () => Promise<String>;
  stripeCusId: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  gender: () => Promise<String>;
  bio: () => Promise<String>;
  image_url: () => Promise<String>;
  portfolio_url: () => Promise<String>;
  linkedin_url: () => Promise<String>;
  github_url: () => Promise<String>;
  personal_url: () => Promise<String>;
  blog_url: () => Promise<String>;
  twitter_url: () => Promise<String>;
  activated_stripe: () => Promise<Boolean>;
  fn_lc: () => Promise<String>;
  ln_lc: () => Promise<String>;
  city_lc: () => Promise<String>;
  state_lc: () => Promise<String>;
  chatActive: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stripeId: () => Promise<AsyncIterator<String>>;
  stripeCusId: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  image_url: () => Promise<AsyncIterator<String>>;
  portfolio_url: () => Promise<AsyncIterator<String>>;
  linkedin_url: () => Promise<AsyncIterator<String>>;
  github_url: () => Promise<AsyncIterator<String>>;
  personal_url: () => Promise<AsyncIterator<String>>;
  blog_url: () => Promise<AsyncIterator<String>>;
  twitter_url: () => Promise<AsyncIterator<String>>;
  activated_stripe: () => Promise<AsyncIterator<Boolean>>;
  fn_lc: () => Promise<AsyncIterator<String>>;
  ln_lc: () => Promise<AsyncIterator<String>>;
  city_lc: () => Promise<AsyncIterator<String>>;
  state_lc: () => Promise<AsyncIterator<String>>;
  chatActive: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "Response",
    embedded: false
  },
  {
    name: "Microservice",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
